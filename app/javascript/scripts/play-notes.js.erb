const WHITE_KEYS = ['q', 'w', 'e', 'r', 't', 'y', 'u','i', 'o', 'p', 'z', 'x', 'c', 'v', 'b']
const BLACK_KEYS = ['2', '3', '5', '6', '7','9', '0', 's', 'd', 'f']
<% helpers = ActionController::Base.helpers %>

const AUDIO_FILES = {
  "C3": "<%= helpers.audio_url 'audios/1-C3.m4a' %>",
  "Db3": "<%= helpers.audio_url 'audios/2-Db3.m4a' %>",
  "D3": "<%= helpers.audio_url 'audios/3-D3.m4a' %>",
  "Eb3": "<%= helpers.audio_url 'audios/4-Eb3.mp3' %>",
  "E3": "<%= helpers.audio_url 'audios/5-E3.m4a' %>",
  "F3": "<%= helpers.audio_url 'audios/6-F3.m4a' %>",
  "Gb3": "<%= helpers.audio_url 'audios/7-Gb3.m4a' %>",
  "G3": "<%= helpers.audio_url 'audios/8-G3.m4a' %>",
  "Ab3": "<%= helpers.audio_url 'audios/9-Ab3.mp3' %>",
  "A3": "<%= helpers.audio_url 'audios/10-A3.m4a' %>",
  "Bb3": "<%= helpers.audio_url 'audios/11-Bb3.m4a' %>",
  "B3": "<%= helpers.audio_url 'audios/12-B3.m4a' %>",

  "C4": "<%= helpers.audio_url 'audios/13-C4.m4a' %>",
  "Db4": "<%= helpers.audio_url 'audios/14-Db4.m4a' %>",
  "D4": "<%= helpers.audio_url 'audios/15-D4.m4a' %>",
  "Eb4": "<%= helpers.audio_url 'audios/16-Eb4.m4a' %>",
  "E4": "<%= helpers.audio_url 'audios/17-E4.m4a' %>",
  "F4": "<%= helpers.audio_url 'audios/18-F4.mp3' %>",
  "Gb4": "<%= helpers.audio_url 'audios/19-Gb4.m4a' %>",
  "G4": "<%= helpers.audio_url 'audios/20-G4.mp3' %>",
  "Ab4": "<%= helpers.audio_url 'audios/21-Ab4.m4a' %>",
  "A4": "<%= helpers.audio_url 'audios/22-A4.mp3' %>",
  "Bb4": "<%= helpers.audio_url 'audios/23-Bb4.m4a' %>",
  "B4": "<%= helpers.audio_url 'audios/24-B4.m4a' %>",
  "C5": "<%= helpers.audio_url 'audios/25-C5.m4a' %>"
}

// const playNotes = () => {
//   const key = selectKeys();
//   playNote(key);
//   dispatchChord(key);
// }


// listens to the 'click' or 'keydown', then triggers the playNote function fot it,
// and dispatches chord only if needed
 const playNotes = () => {
  // keys are all the 25 keys (class="key") from _piano.html.erb
  // each key has data-note and data-number
  const keys = document.querySelectorAll('.key')
  const whiteKeys = document.querySelectorAll('.key.white')
  const blackKeys = document.querySelectorAll('.key.black')
  // add event listener of type 'click' for each one fo the 24 keys
  // and then triggers the playNote function on that key
  if (keys.length) {
    keys.forEach(key => {
      key.addEventListener('click', ( ) => {
        playNote(key);
        dispatchChord(key.dataset.number);
      })
    })
  }
  // add event listener of type 'keydown' for each one fo the 24 keys
  // and then triggers the playNote function on that key
  if(whiteKeys.length && blackKeys.length) {
    document.addEventListener('keydown', (e) => {
      if (e.repeat) return
      const whiteKeyIndex = WHITE_KEYS.indexOf(e.key)
      const blackKeyIndex = BLACK_KEYS.indexOf(e.key);
      if (whiteKeyIndex > -1) {
        playNote(whiteKeys[whiteKeyIndex]);
        dispatchChord(whiteKeys[whiteKeyIndex].dataset.number);
      };
      if (blackKeyIndex > -1) {
        playNote(blackKeys[blackKeyIndex]);
        dispatchChord(blackKeys[blackKeyIndex].dataset.number);
      };
    })
  }

};

//playNote triggers the audio file directly
const playNote = (key) => {
  // console.log('this key is pressed:', key.dataset.note);
  const file = AUDIO_FILES[key.dataset.note]
  // old way: const noteAudio = document.getElementById(key.dataset.note);
  // new way: create it amd remove it
  const noteAudio = document.createElement('audio')
  noteAudio.src = file
  // console.log({noteAudio.src})
  noteAudio.type = "audio/mpeg"
  // current Time = 0 sets the 'restart' to the beginnning (t = 0s) of the file
  // so if I press a key repeatedly very fast, I don't have to wait until the end of the file
  noteAudio.currentTime = 0
  noteAudio.play();
  // 'active' adds animation
  key.classList.add('active');
  const audios = document.querySelectorAll('audio')
  //remove the media element this way, otherwise says 'blocked / reached limit'
  noteAudio.onended = () => {
        // noteAudio.currentSrc = null;
        noteAudio.src = "";
        noteAudio.srcObject = null;
        noteAudio.remove();
    };
  // The setTimeout() method calls a function or evaluates an expression after a specified number of milliseconds.
  // so we are removing the highlighting after 300ms = 0.3s, otherwise it never gets removed
  setTimeout(() => { key.classList.remove('active') }, 300);
}

const dispatchChord = (number) => {
  console.log(window.location.pathname)
  let path = window.location.pathname;
  // e,g, number is "1" if C3, but this number is a string!
  const root = Number.parseInt(number);
  switch(path){
    //intervals
    case '/minor_2nd': playChord(minor_2nd(root));break;
    case '/major_2nd': playChord(major_2nd(root));break;
    case '/minor_3rd': playChord(minor_3rd(root));break;
    case '/major_3rd': playChord(major_3rd(root));break;
    case '/perfect_4th': playChord(perfect_4th(root));break;
    case '/augmented_4th': playChord(augmented_4th(root));break;
    case '/perfect_5th': playChord(perfect_5th(root));break;
    case '/minor_6th': playChord(minor_6th(root));break;
    case '/major_6th': playChord(major_6th(root));break;
    case '/minor_7th': playChord(minor_7th(root));break;
    case '/major_7th': playChord(major_7th(root));break;
    case '/perfect_8ve': playChord(perfect_8ve(root));break;
    //chords
    case '/major_triad':
    playChord(majorTriad(root));
    setTimeout(()=> {playChord(firstInversion(majorTriad(root)));}, 1000);
    setTimeout(()=> { playChord(secondInversion(majorTriad(root)));}, 2000);
    break;
    case '/minor_triad':
    playChord(minorTriad(root));
    setTimeout(()=> {playChord(firstInversion(minorTriad(root)));}, 1000);
    setTimeout(()=> { playChord(secondInversion(minorTriad(root)));}, 2000);
    break;
    case '/diminished_triad':
    playChord(diminishedTriad(root));
    setTimeout(()=> {playChord(firstInversion(diminishedTriad(root)));}, 1000);
    setTimeout(()=> { playChord(secondInversion(diminishedTriad(root)));}, 2000);
    break;
    case '/augmented_triad':
    playChord(augmentedTriad(root));
    setTimeout(()=> {playChord(firstInversion(augmentedTriad(root)));}, 1000);
    setTimeout(()=> { playChord(secondInversion(augmentedTriad(root)));}, 2000);
    break;
    case '/tritone': playChord(tritone(root)); break;
    case '/dominant_7th_chord':
    playChord(dominant_7th_chord(root));
    //setTimeout(()=> {playChord(firstInversion_7th(dominant_7th_chord(root)));}, 1000);
    break;
  }
}

const playChord = (array) => {
  array.forEach(number => {
    // this number is in the data-number attribute of div "key"
    const key = document.querySelector(`[data-number="${number}"]`);
    playNote(key);
  })
}

//intervals
const minor_2nd = (root) => [root, root+1];
const major_2nd = (root) => [root, root+2];
const minor_3rd = (root) => [root, root+3];
const major_3rd = (root) => [root, root+4];
const perfect_4th = (root) => [root, root+5];
const augmented_4th = (root) => [root, root+6];
const perfect_5th = (root) => [root, root+7];
const minor_6th = (root) => [root, root+8];
const major_6th = (root) => [root, root+9];
const minor_7th = (root) => [root, root+10];
const major_7th = (root) => [root, root+11];
const perfect_8ve = (root) => [root, root+12];
//chords
const majorTriad = (root) =>  [root, root+4, root+7];
const minorTriad = (root) =>  [root, root+3, root+7];
const diminishedTriad = (root) =>  [root, root+4, root+6];
const augmentedTriad = (root) => [root, root+4, root+8];
const tritone = (root) => [root, root+6];
const dominant_7th_chord = (root) => [root, root+4, root+7, root+10];

//within a scale
const firstInversion = (chord) => [chord[1],chord[2],chord[0]+12];
const secondInversion =  (chord) => [chord[2],chord[0]+12, chord[1]+12];

const firstInversion_7th = (chord) => [chord[1], chord[2], chord[3], chord[0]+12];


export { playNote }
export { playNotes }








// old: using ajax
// const fetchMajorTriad = (number) => {
//   console.log(number)
//   // goes to  harmonies#construct_major_chord using this fetch method
//   const url = '/harmonies/construct_major_triad'
//   // my params[:number] gets triggered
//   fetch(`${url}?number=${number}`)
//     .then(response => response.json())
//     .then((data) => {
//       // data is the json represtaation of @results (the array I returned by controller)
//       console.log("data: ",data);

//         data.forEach(note => {
//           const audio = document.getElementById(note.name)
//           audio.currentTime = 0
//           audio.play()
//           const key = document.querySelector(`[data-number="${note.number}"]`)
//           key.classList.add('active')
//           setTimeout(() => { key.classList.remove('active'); }, 300)
//         });

//     })
// }


